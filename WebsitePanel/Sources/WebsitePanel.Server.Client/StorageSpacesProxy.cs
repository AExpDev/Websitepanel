//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.7905
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by wsdl, Version=2.0.50727.3038.
// 

using WebsitePanel.Providers.OS;

namespace WebsitePanel.Providers.StorageSpaces {
    using System.Xml.Serialization;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Diagnostics;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="StorageSpaceServicesSoap", Namespace="http://smbsaas/websitepanel/server/")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ServiceProviderItem))]
    public partial class StorageSpaceServices : Microsoft.Web.Services3.WebServicesClientProtocol {
        
        public ServiceProviderSettingsSoapHeader ServiceProviderSettingsSoapHeaderValue;
        
        private System.Threading.SendOrPostCallback GetAllDriveLettersOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSystemSubFoldersOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateStorageSettingsOperationCompleted;
        
        private System.Threading.SendOrPostCallback ClearStorageSettingsOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateFolderQuotaOperationCompleted;
        
        /// <remarks/>
        public StorageSpaceServices() {
            this.Url = "http://localhost:9003/StorageSpaceServices.asmx";
        }
        
        /// <remarks/>
        public event GetAllDriveLettersCompletedEventHandler GetAllDriveLettersCompleted;
        
        /// <remarks/>
        public event GetSystemSubFoldersCompletedEventHandler GetSystemSubFoldersCompleted;
        
        /// <remarks/>
        public event UpdateStorageSettingsCompletedEventHandler UpdateStorageSettingsCompleted;
        
        /// <remarks/>
        public event ClearStorageSettingsCompletedEventHandler ClearStorageSettingsCompleted;
        
        /// <remarks/>
        public event UpdateFolderQuotaCompletedEventHandler UpdateFolderQuotaCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/websitepanel/server/GetAllDriveLetters", RequestNamespace="http://smbsaas/websitepanel/server/", ResponseNamespace="http://smbsaas/websitepanel/server/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SystemFile[] GetAllDriveLetters() {
            object[] results = this.Invoke("GetAllDriveLetters", new object[0]);
            return ((SystemFile[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetAllDriveLetters(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetAllDriveLetters", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public SystemFile[] EndGetAllDriveLetters(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((SystemFile[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAllDriveLettersAsync() {
            this.GetAllDriveLettersAsync(null);
        }
        
        /// <remarks/>
        public void GetAllDriveLettersAsync(object userState) {
            if ((this.GetAllDriveLettersOperationCompleted == null)) {
                this.GetAllDriveLettersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllDriveLettersOperationCompleted);
            }
            this.InvokeAsync("GetAllDriveLetters", new object[0], this.GetAllDriveLettersOperationCompleted, userState);
        }
        
        private void OnGetAllDriveLettersOperationCompleted(object arg) {
            if ((this.GetAllDriveLettersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllDriveLettersCompleted(this, new GetAllDriveLettersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/websitepanel/server/GetSystemSubFolders", RequestNamespace="http://smbsaas/websitepanel/server/", ResponseNamespace="http://smbsaas/websitepanel/server/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SystemFile[] GetSystemSubFolders(string path) {
            object[] results = this.Invoke("GetSystemSubFolders", new object[] {
                        path});
            return ((SystemFile[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetSystemSubFolders(string path, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetSystemSubFolders", new object[] {
                        path}, callback, asyncState);
        }
        
        /// <remarks/>
        public SystemFile[] EndGetSystemSubFolders(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((SystemFile[])(results[0]));
        }
        
        /// <remarks/>
        public void GetSystemSubFoldersAsync(string path) {
            this.GetSystemSubFoldersAsync(path, null);
        }
        
        /// <remarks/>
        public void GetSystemSubFoldersAsync(string path, object userState) {
            if ((this.GetSystemSubFoldersOperationCompleted == null)) {
                this.GetSystemSubFoldersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSystemSubFoldersOperationCompleted);
            }
            this.InvokeAsync("GetSystemSubFolders", new object[] {
                        path}, this.GetSystemSubFoldersOperationCompleted, userState);
        }
        
        private void OnGetSystemSubFoldersOperationCompleted(object arg) {
            if ((this.GetSystemSubFoldersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSystemSubFoldersCompleted(this, new GetSystemSubFoldersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/websitepanel/server/UpdateStorageSettings", RequestNamespace="http://smbsaas/websitepanel/server/", ResponseNamespace="http://smbsaas/websitepanel/server/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateStorageSettings(string fullPath, long qouteSizeBytes, QuotaType type) {
            this.Invoke("UpdateStorageSettings", new object[] {
                        fullPath,
                        qouteSizeBytes,
                        type});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUpdateStorageSettings(string fullPath, long qouteSizeBytes, QuotaType type, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UpdateStorageSettings", new object[] {
                        fullPath,
                        qouteSizeBytes,
                        type}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndUpdateStorageSettings(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void UpdateStorageSettingsAsync(string fullPath, long qouteSizeBytes, QuotaType type) {
            this.UpdateStorageSettingsAsync(fullPath, qouteSizeBytes, type, null);
        }
        
        /// <remarks/>
        public void UpdateStorageSettingsAsync(string fullPath, long qouteSizeBytes, QuotaType type, object userState) {
            if ((this.UpdateStorageSettingsOperationCompleted == null)) {
                this.UpdateStorageSettingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateStorageSettingsOperationCompleted);
            }
            this.InvokeAsync("UpdateStorageSettings", new object[] {
                        fullPath,
                        qouteSizeBytes,
                        type}, this.UpdateStorageSettingsOperationCompleted, userState);
        }
        
        private void OnUpdateStorageSettingsOperationCompleted(object arg) {
            if ((this.UpdateStorageSettingsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateStorageSettingsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/websitepanel/server/ClearStorageSettings", RequestNamespace="http://smbsaas/websitepanel/server/", ResponseNamespace="http://smbsaas/websitepanel/server/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ClearStorageSettings(string fullPath) {
            this.Invoke("ClearStorageSettings", new object[] {
                        fullPath});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginClearStorageSettings(string fullPath, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ClearStorageSettings", new object[] {
                        fullPath}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndClearStorageSettings(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void ClearStorageSettingsAsync(string fullPath) {
            this.ClearStorageSettingsAsync(fullPath, null);
        }
        
        /// <remarks/>
        public void ClearStorageSettingsAsync(string fullPath, object userState) {
            if ((this.ClearStorageSettingsOperationCompleted == null)) {
                this.ClearStorageSettingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnClearStorageSettingsOperationCompleted);
            }
            this.InvokeAsync("ClearStorageSettings", new object[] {
                        fullPath}, this.ClearStorageSettingsOperationCompleted, userState);
        }
        
        private void OnClearStorageSettingsOperationCompleted(object arg) {
            if ((this.ClearStorageSettingsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ClearStorageSettingsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/websitepanel/server/UpdateFolderQuota", RequestNamespace="http://smbsaas/websitepanel/server/", ResponseNamespace="http://smbsaas/websitepanel/server/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateFolderQuota(string fullPath, long qouteSizeBytes, QuotaType type) {
            this.Invoke("UpdateFolderQuota", new object[] {
                        fullPath,
                        qouteSizeBytes,
                        type});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUpdateFolderQuota(string fullPath, long qouteSizeBytes, QuotaType type, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UpdateFolderQuota", new object[] {
                        fullPath,
                        qouteSizeBytes,
                        type}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndUpdateFolderQuota(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void UpdateFolderQuotaAsync(string fullPath, long qouteSizeBytes, QuotaType type) {
            this.UpdateFolderQuotaAsync(fullPath, qouteSizeBytes, type, null);
        }
        
        /// <remarks/>
        public void UpdateFolderQuotaAsync(string fullPath, long qouteSizeBytes, QuotaType type, object userState) {
            if ((this.UpdateFolderQuotaOperationCompleted == null)) {
                this.UpdateFolderQuotaOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateFolderQuotaOperationCompleted);
            }
            this.InvokeAsync("UpdateFolderQuota", new object[] {
                        fullPath,
                        qouteSizeBytes,
                        type}, this.UpdateFolderQuotaOperationCompleted, userState);
        }
        
        private void OnUpdateFolderQuotaOperationCompleted(object arg) {
            if ((this.UpdateFolderQuotaCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateFolderQuotaCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetAllDriveLettersCompletedEventHandler(object sender, GetAllDriveLettersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllDriveLettersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllDriveLettersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SystemFile[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SystemFile[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetSystemSubFoldersCompletedEventHandler(object sender, GetSystemSubFoldersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSystemSubFoldersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSystemSubFoldersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SystemFile[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SystemFile[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void UpdateStorageSettingsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void ClearStorageSettingsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void UpdateFolderQuotaCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
}
